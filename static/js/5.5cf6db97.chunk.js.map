{"version":3,"file":"static/js/5.5cf6db97.chunk.js","mappings":"iLACA,EAAmC,iCAAnC,EAAmF,6BAAnF,EAA2H,yB,oBCA3H,EAAyF,6B,SCkBzF,EAToB,SAACA,GACjB,OACI,4BACI,SAACC,EAAA,EAAD,CAAQC,IAAK,iEACb,SAAC,KAAD,CAASC,UAAWC,EAAiBC,GAAE,mBAAcL,EAAMM,IAA3D,SAAkEN,EAAMO,WCApF,EATqC,SAACP,GAElC,OACI,yBACKA,EAAMQ,e,oBCCNC,EAAiB,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,WACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAYA,OACI,0BACI,SAACC,EAAA,EAAD,CAAeC,YAAa,cACdC,qBARW,WAC7BP,EAASD,EAAWI,IACpBC,EAAgB,KAOGI,UApBN,IAqBMC,MAAON,EACPO,gBAfC,SAACC,GACrBP,EAAgBO,EAAMC,OAAOH,a,UCYrC,EAnB0C,SAACpB,GAEvC,IAAIwB,EAAaxB,EAAMyB,YAAYC,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAwBrB,KAAMqB,EAAErB,KAAMD,GAAIsB,EAAEtB,IAA1BsB,EAAEtB,OAExEuB,EAAc7B,EAAMyB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoBvB,YAAauB,EAAEvB,aAArBuB,EAAEzB,OAEtE,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKoB,KAEL,iBAAKrB,UAAWC,EAAhB,UACKyB,GACD,SAACpB,EAAD,CAAgBC,WAAYA,EAAAA,Y,UCO5C,GALwBsB,E,QAAAA,KACpBC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHT,YAAaS,EAAMC,cAKE,CAACzB,WAAAA,EAAAA,KAC1B0B,EAAAA,EAFoBJ,CAGtBK","sources":["webpack://samurai-way/./src/features/Dialog/Dialog.module.css?f317","webpack://samurai-way/./src/features/Dialog/DialogItems/DialogItem.module.css?1cdb","features/Dialog/DialogItems/DialogItems.tsx","features/Dialog/Messages/Message.tsx","features/Dialog/DialogTextArea/DialogTextArea.tsx","features/Dialog/Dialog.tsx","features/Dialog/DialogContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialog_dialogsContainer__fF9Ru\",\"dialogsItems\":\"Dialog_dialogsItems__mb63y\",\"messages\":\"Dialog_messages__LTFUC\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItemContainer\":\"DialogItem_dialogItemContainer__hZX3K\",\"userName\":\"DialogItem_userName__LJsf7\"};","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport Avatar from \"../../../common/components/Avatar/Avatar\";\nimport styles from \"./DialogItem.module.css\";\n\ntype PropsType={\n    name: string;\n    id: number;\n}\n\nconst DialogItems = (props: PropsType) => {\n    return (\n        <div>\n            <Avatar src={\"https://hw-media.herworld.com/public/girl-with-backpack.jpg\"}/>\n            <NavLink className={styles.userName} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    );\n};\n\nexport default DialogItems;","import React from 'react';\n\ntype PropsType = {\n    messageBody: string;\n}\nconst Message: React.FC<PropsType> = (props) => {\n\n    return (\n        <div>\n            {props.messageBody}\n        </div>\n    );\n};\n\nexport default Message;","import React, {ChangeEvent, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {LimitTextArea} from '../../../common/components/LimitTextArea/LimitTextArea';\n\ntype PropsType = {\n    addMessage: (message: string) => void\n}\n\nconst maxLength100 = 100;\n\nexport const DialogTextArea = ({addMessage}: PropsType) => {\n    const dispatch = useDispatch();\n    const [currentValue, setCurrentValue] = useState(\"\");\n\n\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setCurrentValue(event.target.value);\n    }\n\n    const onAddMessageClickHandler = () => {\n        dispatch(addMessage(currentValue));\n        setCurrentValue(\"\");\n    }\n\n    return (\n        <div>\n            <LimitTextArea buttonTitle={'Add message'}\n                          onButtonClickHandler={onAddMessageClickHandler}\n                           maxLength={maxLength100}\n                           value={currentValue}\n                           onChangeHandler={onChangeHandler}\n            />\n            {/*<div>*/}\n            {/*    <Button*/}\n            {/*        style={{*/}\n            {/*            // backgroundColor: \"#149AC9\"*/}\n            {/*            backgroundColor: \"#1ac2c1\",*/}\n            {/*            borderColor: \"#1ac2c1\",*/}\n            {/*        }}*/}\n            {/*        type=\"primary\"*/}\n            {/*        onClick={onAddMessageClickHandler} disabled={limit<0}>Add message</Button>*/}\n            {/*</div>*/}\n        </div>\n    );\n};","import React from \"react\";\nimport styles from \"./Dialog.module.css\"\nimport DialogItems from \"./DialogItems/DialogItems\";\nimport Message from \"./Messages/Message\";\nimport {DialogPropsType} from \"./DialogContainer\";\nimport {DialogTextArea} from \"./DialogTextArea/DialogTextArea\";\nimport {addMessage} from \"./dialogs-reducer\";\n\n\nconst Dialog: React.FC<DialogPropsType> = (props) => {\n\n    let dialogList = props.dialogsPage.dialogItems.map(d => <DialogItems key={d.id} name={d.name} id={d.id}/>)\n\n    let messageList = props.dialogsPage.messages.map(m => <Message key={m.id} messageBody={m.messageBody}/>)\n\n    return (\n        <div className={styles.dialogsContainer}>\n            <div className={styles.dialogsItems}>\n                {dialogList}\n            </div>\n            <div className={styles.messages}>\n                {messageList}\n                <DialogTextArea addMessage={addMessage}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialog;\n","import {connect} from \"react-redux\";\nimport Dialog from \"./Dialog\";\nimport {AppStateType} from \"../../app/redux-store\";\nimport {addMessage, InitialStateType} from \"./dialogs-reducer\";\nimport {withAuthRedirect} from \"../../common/hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {ComponentType} from \"react\";\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType;\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (newMessageText: string ) => void;\n}\n\nexport type DialogPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogPage,\n    }\n}\n\nconst DialogContainer = compose<ComponentType>(\n    connect(mapStateToProps, {addMessage}),\n    withAuthRedirect\n)(Dialog);\n\nexport default DialogContainer;"],"names":["props","Avatar","src","className","styles","to","id","name","messageBody","DialogTextArea","addMessage","dispatch","useDispatch","useState","currentValue","setCurrentValue","LimitTextArea","buttonTitle","onButtonClickHandler","maxLength","value","onChangeHandler","event","target","dialogList","dialogsPage","dialogItems","map","d","messageList","messages","m","compose","connect","state","dialogPage","withAuthRedirect","Dialog"],"sourceRoot":""}