{"version":3,"file":"static/js/131.0ff9d0ab.chunk.js","mappings":"mLACA,EAA0B,wBAA1B,EAAiE,6BAAjE,EAAyG,yB,6BCkBzG,EAToB,SAACA,GACjB,OACI,4BACI,SAACC,EAAA,EAAD,CAAQC,IAAK,iEACb,SAAC,KAAD,CAASC,GAAE,mBAAcH,EAAMI,IAA/B,SAAsCJ,EAAMK,WCAxD,EATqC,SAACL,GAElC,OACI,yBACKA,EAAMM,e,8BCYNC,EAAiB,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,WACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAWIC,EAfa,IAeUF,EAAaG,OAExC,OACI,4BACI,iBAAKC,UAAWC,EAAAA,EAAAA,kBAAhB,WACI,qBAAUC,UApBL,IAoB8BF,UAAWC,EAAAA,EAAAA,SAAiBE,SAbnD,SAACC,GACrBP,EAAgBO,EAAMC,OAAOC,QAYqEA,MAAOV,KACjG,iBAAMI,UAAWC,EAAAA,EAAAA,MAAjB,SAAgCH,OAEnCA,EAAM,IAAK,gBAAKE,UAAWC,EAAAA,EAAAA,MAAhB,UAA8B,mCAvBjC,IAuBiC,iBAC1C,0BACI,SAAC,IAAD,CACIM,MAAO,CAEHC,gBAAiB,UACjBC,YAAa,WAEjBC,KAAK,UACLC,QArBiB,WAC7BlB,EAASD,EAAWI,IACpBC,EAAgB,KAmB+Be,SAAUd,EAAM,EAPvD,+B,UChBhB,EAnB0C,SAACd,GAEvC,IAAI6B,EAAa7B,EAAM8B,YAAYC,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAwB5B,KAAM4B,EAAE5B,KAAMD,GAAI6B,EAAE7B,IAA1B6B,EAAE7B,OAExE8B,EAAclC,EAAM8B,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoB9B,YAAa8B,EAAE9B,aAArB8B,EAAEhC,OAEtE,OACI,iBAAKY,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKY,KAEL,iBAAKb,UAAWC,EAAhB,UACKiB,GACD,SAAC3B,EAAD,CAAgBC,WAAYA,EAAAA,Y,UCO5C,GALwB6B,E,QAAAA,KACpBC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHT,YAAaS,EAAMC,cAKE,CAAChC,WAAAA,EAAAA,KAC1BiC,EAAAA,EAFoBJ,CAGtBK","sources":["webpack://samurai-way/./src/components/Main/Dialog/Dialog.module.css?8890","components/Main/Dialog/DialogItems/DialogItems.tsx","components/Main/Dialog/Messages/Message.tsx","components/Main/Dialog/DialogTextArea/DialogTextArea.tsx","components/Main/Dialog/Dialog.tsx","components/Main/Dialog/DialogContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog_dialogs__szXE0\",\"dialogsItems\":\"Dialog_dialogsItems__Ita6M\",\"messages\":\"Dialog_messages__zTCMd\"};","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport Avatar from \"../../../common/Avatar/Avatar\";\nimport styles from \"./DialogItem.module.css\";\n\ntype PropsType={\n    name: string;\n    id: number;\n}\n\nconst DialogItems = (props: PropsType) => {\n    return (\n        <div>\n            <Avatar src={\"https://hw-media.herworld.com/public/girl-with-backpack.jpg\"}/>\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    );\n};\n\nexport default DialogItems;","import React from 'react';\n\ntype PropsType = {\n    messageBody: string;\n}\nconst Message: React.FC<PropsType> = (props) => {\n\n    return (\n        <div>\n            {props.messageBody}\n        </div>\n    );\n};\n\nexport default Message;","import React, {ChangeEvent, useState} from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators\";\nimport styles from \"../../Profile/My Posts/AddMyPostForm/AddMyPost.module.css\";\nimport {Button} from \"antd\";\nimport {useDispatch} from \"react-redux\";\nimport {addPost} from \"../../../../redux/profile-reducer\";\n\n\n// export type NewMessageFormType = {\n//     dialogTextArea: string;\n// }\n\ntype PropsType = {\n    addMessage: (message: string) => void\n}\n\n\nconst maxLength100 = 100;\n\nexport const DialogTextArea = ({addMessage}: PropsType) => {\n    const dispatch = useDispatch();\n    const [currentValue, setCurrentValue] = useState(\"\");\n\n\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        setCurrentValue(event.target.value);\n    }\n\n    const onAddMessageClickHandler = () => {\n        dispatch(addMessage(currentValue));\n        setCurrentValue(\"\");\n    }\n    let limit = maxLength100 - currentValue.length\n\n    return (\n        <div>\n            <div className={styles.textareaContainer}>\n                <textarea maxLength={maxLength100} className={styles.textarea} onChange={onChangeHandler} value={currentValue}/>\n                <span className={styles.limit}>{limit}</span>\n            </div>\n            {limit<0 && <div className={styles.error}><span>Max {maxLength100} symbols</span></div>}\n            <div>\n                <Button\n                    style={{\n                        // backgroundColor: \"#149AC9\"\n                        backgroundColor: \"#1ac2c1\",\n                        borderColor: \"#1ac2c1\",\n                    }}\n                    type=\"primary\"\n                    onClick={onAddMessageClickHandler} disabled={limit<0}>Add message</Button>\n            </div>\n        </div>\n    );\n};","import React from \"react\";\nimport styles from \"./Dialog.module.css\"\nimport DialogItems from \"./DialogItems/DialogItems\";\nimport Message from \"./Messages/Message\";\nimport {DialogPropsType} from \"./DialogContainer\";\nimport {DialogTextArea} from \"./DialogTextArea/DialogTextArea\";\nimport {addMessage} from \"../../../redux/dialogs-reducer\";\n\n\nconst Dialog: React.FC<DialogPropsType> = (props) => {\n\n    let dialogList = props.dialogsPage.dialogItems.map(d => <DialogItems key={d.id} name={d.name} id={d.id}/>)\n\n    let messageList = props.dialogsPage.messages.map(m => <Message key={m.id} messageBody={m.messageBody}/>)\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogsItems}>\n                {dialogList}\n            </div>\n            <div className={styles.messages}>\n                {messageList}\n                <DialogTextArea addMessage={addMessage}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Dialog;\n","import {connect} from \"react-redux\";\nimport Dialog from \"./Dialog\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addMessage, InitialStateType} from \"../../../redux/dialogs-reducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {ComponentType} from \"react\";\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType;\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (newMessageText: string ) => void;\n}\n\nexport type DialogPropsType = MapStateToPropsType & MapDispatchToPropsType;\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogPage,\n    }\n}\n\nconst DialogContainer = compose<ComponentType>(\n    connect(mapStateToProps, {addMessage}),\n    withAuthRedirect\n)(Dialog);\n\nexport default DialogContainer;"],"names":["props","Avatar","src","to","id","name","messageBody","DialogTextArea","addMessage","dispatch","useDispatch","useState","currentValue","setCurrentValue","limit","length","className","styles","maxLength","onChange","event","target","value","style","backgroundColor","borderColor","type","onClick","disabled","dialogList","dialogsPage","dialogItems","map","d","messageList","messages","m","compose","connect","state","dialogPage","withAuthRedirect","Dialog"],"sourceRoot":""}